import React, { useState } from "react";
import {
  View,
  Text,
  StyleSheet,
  Dimensions,
  TouchableOpacity,
} from "react-native";
import { PanGestureHandler, State } from "react-native-gesture-handler";
import Animated, {
  Easing,
  Extrapolate,
  interpolate,
  useAnimatedStyle,
  useSharedValue,
  withSpring,
  withTiming,
} from "react-native-reanimated";
import FlipCard from "react-native-flip-card";

const { height } = Dimensions.get("window");
const { width } = Dimensions.get("window");

const FactSwiper = ({ facts }) => {
  const [currentIndex, setCurrentIndex] = useState(0);
  const [changeSide, setChangeSide] = useState(false);
  const spin = useSharedValue<number>(0);
  const swipeY = useSharedValue<number>(0);
  const swipeX = useSharedValue<number>(0);

  const rStyle = useAnimatedStyle(() => {
    const rotateY = interpolate(
      spin.value,
      [0, 1],
      [0, 180],
      Extrapolate.CLAMP
    );
    return {
      transform: [{ rotateY: `${rotateY}deg` }],
    };
  });

  const bStyle = useAnimatedStyle(() => {
    const rotateY = interpolate(
      spin.value,
      [0, 1],
      [180, 360],
      Extrapolate.CLAMP
    );
    return {
      transform: [{ rotateY: `${rotateY}deg` }],
    };
  });

  const onSwipeComplete = (direction) => {
    if (direction === "up" && currentIndex > 0) {
      setCurrentIndex(currentIndex - 1);
    } else if (direction === "down" && currentIndex < facts.length - 1) {
      setCurrentIndex(currentIndex + 1);
    }

    spin.value = withSpring(0);
    swipeY.value = 0;
  };

  const onHandlerStateChange = (event) => {
    console.log("event", event, null, 2);
    if (event.direction === "left") {
      onLeftSwipe();
      return;
    }

    if (event.nativeEvent.oldState === State.ACTIVE) {
      const directionY = swipeY.value > 0 ? "down" : "up";
      const directionX = swipeX.value > 0 ? "left" : "right";

      if (Math.abs(swipeY.value) > height / 4) {
        onSwipeComplete(directionY);
      } else if (Math.abs(swipeX.value) > width / 4) {
        onSwipeComplete(directionX);
      } else {
        spin.value = withSpring(0);
        swipeY.value = withSpring(0);
      }
    }
  };
  // you implement it in the gesture handler when it was left
  const onLeftSwipe = () => {
    setChangeSide(!changeSide);
  };
  const onRightSwipe = () => {
    setChangeSide(!changeSide);
  };

  const fact = facts[currentIndex] || { key: "" };

  return (
    <View style={styles.container}>
      <View>
        <PanGestureHandler
          onGestureEvent={({ nativeEvent }) => {
            swipeY.value = nativeEvent.translationY;
          }}
          onHandlerStateChange={onHandlerStateChange}
        >
          <FlipCard
            style={styles.card}
            friction={6}
            perspective={1000}
            flipHorizontal={true}
            flip={changeSide}
            clickable={true}
            onFlipEnd={(isFlipEnd) => {
              console.log("isFlipEnd", isFlipEnd);
            }}
          >
            {/* Face Side */}
            <Animated.View style={[styles.card, rStyle]}>
              <Text style={styles.factText}>{fact.key}</Text>
            </Animated.View>
            {/* Back Side */}
            <Animated.View style={[styles.card, rStyle]}>
              <Text style={styles.factText}>Back</Text>
            </Animated.View>
          </FlipCard>
        </PanGestureHandler>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: {
    flex: 1,
    justifyContent: "center",
    alignItems: "center",
  },
  card: {
    height: 400,
    width: 370,
    borderRadius: 8,
    backgroundColor: "#fff",
    alignItems: "center",
    justifyContent: "center",
    borderWidth: 1,
    borderColor: "#ccc",
  },
  factText: {
    textAlign: "center",
    fontSize: 18, // Adjust the font size as needed
    padding: 16, // Adjust the padding as needed
  },
  buttonRow: {
    flexDirection: "row",
    marginTop: 10,
  },
  button: {
    marginTop: 10,
    width: 100,
    padding: 15,
    borderRadius: 10,
    alignItems: "center",
  },
  buttonText: {
    color: "#fff",
  },
});

export default FactSwiper;
